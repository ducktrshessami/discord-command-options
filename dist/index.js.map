{"version":3,"sources":["../src/index.ts","../src/error.ts"],"sourcesContent":["import { APIApplicationCommandInteractionDataOption, ApplicationCommandOptionType, InteractionType } from \"discord-api-types/v10\";\nimport { ApplicationCommandOptionResolutionError } from \"./error\";\n\ntype ApplicationCommandInteractionTypes = InteractionType.ApplicationCommand | InteractionType.ApplicationCommandAutocomplete;\ntype ExtractedOption<CommandInteractionType extends ApplicationCommandInteractionTypes, OptionType extends ApplicationCommandOptionType> = Extract<APIApplicationCommandInteractionDataOption<CommandInteractionType>, { type: OptionType; }>;\nexport type SubcommandOptionType = ApplicationCommandOptionType.Subcommand | ApplicationCommandOptionType.SubcommandGroup;\nexport type FocusableOptionType = Extract<APIApplicationCommandInteractionDataOption<InteractionType.ApplicationCommandAutocomplete>, { focused?: boolean }>[\"type\"];\nexport type AutocompleteFocusedOption<OptionType extends FocusableOptionType = FocusableOptionType> = Omit<ExtractedOption<InteractionType.ApplicationCommandAutocomplete, OptionType>, \"focused\"> & { focused: true };\ninterface BaseGetOptionQuery<OptionType extends ApplicationCommandOptionType> {\n    name: string;\n    type: OptionType;\n}\ninterface RequiredOption<Required extends boolean = boolean> {\n    required: Required;\n}\n\nexport class ApplicationCommandOptions<CommandInteractionType extends ApplicationCommandInteractionTypes> {\n    private readonly _options: Map<string, APIApplicationCommandInteractionDataOption<CommandInteractionType>>;\n    private _subcommand: string | null;\n    private _group: string | null;\n    private _focused: string | null;\n\n    private mapOptions(options: APIApplicationCommandInteractionDataOption<CommandInteractionType>[] | undefined): void {\n        options?.forEach(option => {\n            switch (true) {\n                case option.type === ApplicationCommandOptionType.Subcommand: this._subcommand = option.name; break;\n                case option.type === ApplicationCommandOptionType.SubcommandGroup: this._group = option.name; break;\n                default:\n                    if (\"focused\" in option && option.focused) {\n                        this._focused = option.name;\n                    }\n                    this._options.set(option.name, option);\n                    break;\n            }\n            if (\"options\" in option) {\n                this.mapOptions(option.options);\n            }\n        });\n    }\n\n    constructor(options?: APIApplicationCommandInteractionDataOption<CommandInteractionType>[]) {\n        this._options = new Map<string, APIApplicationCommandInteractionDataOption<CommandInteractionType>>();\n        this._subcommand = null;\n        this._group = null;\n        this._focused = null;\n        this.mapOptions(options);\n    }\n\n    get<OptionType extends Exclude<ApplicationCommandOptionType, SubcommandOptionType>>(query: BaseGetOptionQuery<OptionType> & RequiredOption<true>): ExtractedOption<CommandInteractionType, OptionType>;\n    get<OptionType extends Exclude<ApplicationCommandOptionType, SubcommandOptionType>>(query: BaseGetOptionQuery<OptionType> & Partial<RequiredOption>): ExtractedOption<CommandInteractionType, OptionType> | null;\n    get<OptionType extends Exclude<ApplicationCommandOptionType, SubcommandOptionType>>(query: BaseGetOptionQuery<OptionType> & Partial<RequiredOption>): ExtractedOption<CommandInteractionType, OptionType> | null {\n        const option = this._options.get(query.name) ?? null;\n        if (query.required && !option) {\n            throw new ApplicationCommandOptionResolutionError(`Unable to find required option: ${query.name}`);\n        }\n        if (option && option.type !== query.type) {\n            throw new ApplicationCommandOptionResolutionError(`Expected option type ${ApplicationCommandOptionType[query.type]}. Received: ${ApplicationCommandOptionType[option.type]}`);\n        }\n        return <ExtractedOption<CommandInteractionType, OptionType> | null>option;\n    }\n\n    get subcommand(): string | null {\n        return this._subcommand;\n    }\n\n    get group(): string | null {\n        return this._group;\n    }\n\n    getFocused(): AutocompleteFocusedOption {\n        if (!this._focused) {\n            throw new ApplicationCommandOptionResolutionError(\"Unabled to find focused option\");\n        }\n        return <AutocompleteFocusedOption>this._options.get(this._focused)!;\n    }\n}\n\nexport function getFocusedOption(options: APIApplicationCommandInteractionDataOption<InteractionType.ApplicationCommandAutocomplete>[]): AutocompleteFocusedOption {\n    const focused = options.find(option => \"focused\" in option && option.focused);\n    if (!focused) {\n        throw new ApplicationCommandOptionResolutionError(\"Unabled to find focused option\");\n    }\n    return <AutocompleteFocusedOption>focused;\n}\n","export class ApplicationCommandOptionResolutionError extends Error {\n    constructor(message: string) {\n        super(message);\n        this.name = this.constructor.name;\n    }\n}\n"],"mappings":"wpBAAA,uMAA0G,iCCAnG,IAAM,wCAAN,cAAsD,KAAM,CAC/D,YAAY,QAAiB,CACzB,MAAM,OAAO,EACb,KAAK,KAAO,KAAK,YAAY,IACjC,CACJ,EDWO,IAAM,0BAAN,KAAmG,CACrF,SACT,YACA,OACA,SAEA,WAAW,QAAiG,CAChH,SAAS,QAAQ,QAAU,CACvB,OAAQ,GAAM,CACV,KAAK,OAAO,OAAS,wCAA6B,WAAY,KAAK,YAAc,OAAO,KAAM,MAC9F,KAAK,OAAO,OAAS,wCAA6B,gBAAiB,KAAK,OAAS,OAAO,KAAM,MAC9F,QACQ,YAAa,QAAU,OAAO,UAC9B,KAAK,SAAW,OAAO,MAE3B,KAAK,SAAS,IAAI,OAAO,KAAM,MAAM,EACrC,KACR,CACI,YAAa,QACb,KAAK,WAAW,OAAO,OAAO,CAEtC,CAAC,CACL,CAEA,YAAY,QAAgF,CACxF,KAAK,SAAW,IAAI,IACpB,KAAK,YAAc,KACnB,KAAK,OAAS,KACd,KAAK,SAAW,KAChB,KAAK,WAAW,OAAO,CAC3B,CAIA,IAAoF,MAA6H,CAC7M,IAAM,OAAS,KAAK,SAAS,IAAI,MAAM,IAAI,GAAK,KAChD,GAAI,MAAM,UAAY,CAAC,OACnB,MAAM,IAAI,wCAAwC,mCAAmC,MAAM,IAAI,EAAE,EAErG,GAAI,QAAU,OAAO,OAAS,MAAM,KAChC,MAAM,IAAI,wCAAwC,wBAAwB,wCAA6B,MAAM,IAAI,CAAC,eAAe,wCAA6B,OAAO,IAAI,CAAC,EAAE,EAEhL,OAAmE,MACvE,CAEA,IAAI,YAA4B,CAC5B,OAAO,KAAK,WAChB,CAEA,IAAI,OAAuB,CACvB,OAAO,KAAK,MAChB,CAEA,YAAwC,CACpC,GAAI,CAAC,KAAK,SACN,MAAM,IAAI,wCAAwC,gCAAgC,EAEtF,OAAkC,KAAK,SAAS,IAAI,KAAK,QAAQ,CACrE,CACJ,EAEO,SAAS,iBAAiB,QAAkI,CAC/J,IAAM,QAAU,QAAQ,KAAK,QAAU,YAAa,QAAU,OAAO,OAAO,EAC5E,GAAI,CAAC,QACD,MAAM,IAAI,wCAAwC,gCAAgC,EAEtF,OAAkC,OACtC","names":[]}