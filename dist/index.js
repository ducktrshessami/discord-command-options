"use strict";var __defProp=Object.defineProperty;var __getOwnPropDesc=Object.getOwnPropertyDescriptor;var __getOwnPropNames=Object.getOwnPropertyNames;var __hasOwnProp=Object.prototype.hasOwnProperty;var __export=(target,all)=>{for(var name in all)__defProp(target,name,{get:all[name],enumerable:!0})},__copyProps=(to,from,except,desc)=>{if(from&&typeof from=="object"||typeof from=="function")for(let key of __getOwnPropNames(from))!__hasOwnProp.call(to,key)&&key!==except&&__defProp(to,key,{get:()=>from[key],enumerable:!(desc=__getOwnPropDesc(from,key))||desc.enumerable});return to};var __toCommonJS=mod=>__copyProps(__defProp({},"__esModule",{value:!0}),mod);var index_exports={};__export(index_exports,{ApplicationCommandOptions:()=>ApplicationCommandOptions,getFocusedOption:()=>getFocusedOption});module.exports=__toCommonJS(index_exports);var import_v10=require("discord-api-types/v10");var ApplicationCommandOptionResolutionError=class extends Error{constructor(message){super(message),this.name=this.constructor.name}};var ApplicationCommandOptions=class{_options;_subcommand;_group;_focused;mapOptions(options){options?.forEach(option=>{switch(!0){case option.type===import_v10.ApplicationCommandOptionType.Subcommand:this._subcommand=option.name;break;case option.type===import_v10.ApplicationCommandOptionType.SubcommandGroup:this._group=option.name;break;default:"focused"in option&&option.focused&&(this._focused=option.name),this._options.set(option.name,option);break}"options"in option&&this.mapOptions(option.options)})}constructor(options){this._options=new Map,this._subcommand=null,this._group=null,this._focused=null,this.mapOptions(options)}get(query){let option=this._options.get(query.name)??null;if(query.required&&!option)throw new ApplicationCommandOptionResolutionError(`Unable to find required option: ${query.name}`);if(option&&option.type!==query.type)throw new ApplicationCommandOptionResolutionError(`Expected option type ${import_v10.ApplicationCommandOptionType[query.type]}. Received: ${import_v10.ApplicationCommandOptionType[option.type]}`);return option}get subcommand(){return this._subcommand}get group(){return this._group}getFocused(){if(!this._focused)throw new ApplicationCommandOptionResolutionError("Unabled to find focused option");return this._options.get(this._focused)}};function getFocusedOption(options){let focused=options.find(option=>"focused"in option&&option.focused);if(!focused)throw new ApplicationCommandOptionResolutionError("Unabled to find focused option");return focused}0&&(module.exports={ApplicationCommandOptions,getFocusedOption});
//# sourceMappingURL=index.js.map