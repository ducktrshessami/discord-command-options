{"version":3,"sources":["../src/index.ts","../src/error.ts"],"sourcesContent":["import { APIApplicationCommandInteractionDataOption, ApplicationCommandOptionType, InteractionType } from \"discord-api-types/v10\";\nimport { ApplicationCommandOptionResolutionError } from \"./error\";\n\ntype ApplicationCommandInteractionTypes = InteractionType.ApplicationCommand | InteractionType.ApplicationCommandAutocomplete;\ntype ExtractedOption<CommandInteractionType extends ApplicationCommandInteractionTypes, OptionType extends ApplicationCommandOptionType> = Extract<APIApplicationCommandInteractionDataOption<CommandInteractionType>, { type: OptionType; }>;\nexport type SubcommandOptionType = ApplicationCommandOptionType.Subcommand | ApplicationCommandOptionType.SubcommandGroup;\nexport type FocusableOptionType = Extract<APIApplicationCommandInteractionDataOption<InteractionType.ApplicationCommandAutocomplete>, { focused?: boolean }>[\"type\"];\nexport type AutocompleteFocusedOption<OptionType extends FocusableOptionType = FocusableOptionType> = Omit<ExtractedOption<InteractionType.ApplicationCommandAutocomplete, OptionType>, \"focused\"> & { focused: true };\ninterface BaseGetOptionQuery<OptionType extends ApplicationCommandOptionType> {\n    name: string;\n    type: OptionType;\n}\ninterface RequiredOption<Required extends boolean = boolean> {\n    required: Required;\n}\n\nexport class ApplicationCommandOptions<CommandInteractionType extends ApplicationCommandInteractionTypes> {\n    private readonly _options: Map<string, APIApplicationCommandInteractionDataOption<CommandInteractionType>>;\n    private _subcommand: string | null;\n    private _group: string | null;\n    private _focused: string | null;\n\n    private mapOptions(options: APIApplicationCommandInteractionDataOption<CommandInteractionType>[] | undefined): void {\n        options?.forEach(option => {\n            switch (true) {\n                case option.type === ApplicationCommandOptionType.Subcommand: this._subcommand = option.name; break;\n                case option.type === ApplicationCommandOptionType.SubcommandGroup: this._group = option.name; break;\n                default:\n                    if (\"focused\" in option && option.focused) {\n                        this._focused = option.name;\n                    }\n                    this._options.set(option.name, option);\n                    break;\n            }\n            if (\"options\" in option) {\n                this.mapOptions(option.options);\n            }\n        });\n    }\n\n    constructor(options?: APIApplicationCommandInteractionDataOption<CommandInteractionType>[]) {\n        this._options = new Map<string, APIApplicationCommandInteractionDataOption<CommandInteractionType>>();\n        this._subcommand = null;\n        this._group = null;\n        this._focused = null;\n        this.mapOptions(options);\n    }\n\n    get<OptionType extends Exclude<ApplicationCommandOptionType, SubcommandOptionType>>(query: BaseGetOptionQuery<OptionType> & RequiredOption<true>): ExtractedOption<CommandInteractionType, OptionType>;\n    get<OptionType extends Exclude<ApplicationCommandOptionType, SubcommandOptionType>>(query: BaseGetOptionQuery<OptionType> & Partial<RequiredOption>): ExtractedOption<CommandInteractionType, OptionType> | null;\n    get<OptionType extends Exclude<ApplicationCommandOptionType, SubcommandOptionType>>(query: BaseGetOptionQuery<OptionType> & Partial<RequiredOption>): ExtractedOption<CommandInteractionType, OptionType> | null {\n        const option = this._options.get(query.name) ?? null;\n        if (query.required && !option) {\n            throw new ApplicationCommandOptionResolutionError(`Unable to find required option: ${query.name}`);\n        }\n        if (option && option.type !== query.type) {\n            throw new ApplicationCommandOptionResolutionError(`Expected option type ${ApplicationCommandOptionType[query.type]}. Received: ${ApplicationCommandOptionType[option.type]}`);\n        }\n        return <ExtractedOption<CommandInteractionType, OptionType> | null>option;\n    }\n\n    get subcommand(): string | null {\n        return this._subcommand;\n    }\n\n    get group(): string | null {\n        return this._group;\n    }\n\n    getFocused(): AutocompleteFocusedOption {\n        if (!this._focused) {\n            throw new ApplicationCommandOptionResolutionError(\"Unabled to find focused option\");\n        }\n        return <AutocompleteFocusedOption>this._options.get(this._focused)!;\n    }\n}\n\nexport function getFocusedOption(options: APIApplicationCommandInteractionDataOption<InteractionType.ApplicationCommandAutocomplete>[]): AutocompleteFocusedOption {\n    const focused = options.find(option => \"focused\" in option && option.focused);\n    if (!focused) {\n        throw new ApplicationCommandOptionResolutionError(\"Unabled to find focused option\");\n    }\n    return <AutocompleteFocusedOption>focused;\n}\n","export class ApplicationCommandOptionResolutionError extends Error {\n    constructor(message: string) {\n        super(message);\n        this.name = this.constructor.name;\n    }\n}\n"],"mappings":";AAAA,SAAqD,oCAAqD;;;ACAnG,IAAM,0CAAN,cAAsD,MAAM;AAAA,EAC/D,YAAY,SAAiB;AACzB,UAAM,OAAO;AACb,SAAK,OAAO,KAAK,YAAY;AAAA,EACjC;AACJ;;;ADWO,IAAM,4BAAN,MAAmG;AAAA,EACrF;AAAA,EACT;AAAA,EACA;AAAA,EACA;AAAA,EAEA,WAAW,SAAiG;AAChH,aAAS,QAAQ,YAAU;AACvB,cAAQ,MAAM;AAAA,QACV,KAAK,OAAO,SAAS,6BAA6B;AAAY,eAAK,cAAc,OAAO;AAAM;AAAA,QAC9F,KAAK,OAAO,SAAS,6BAA6B;AAAiB,eAAK,SAAS,OAAO;AAAM;AAAA,QAC9F;AACI,cAAI,aAAa,UAAU,OAAO,SAAS;AACvC,iBAAK,WAAW,OAAO;AAAA,UAC3B;AACA,eAAK,SAAS,IAAI,OAAO,MAAM,MAAM;AACrC;AAAA,MACR;AACA,UAAI,aAAa,QAAQ;AACrB,aAAK,WAAW,OAAO,OAAO;AAAA,MAClC;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEA,YAAY,SAAgF;AACxF,SAAK,WAAW,oBAAI,IAAgF;AACpG,SAAK,cAAc;AACnB,SAAK,SAAS;AACd,SAAK,WAAW;AAChB,SAAK,WAAW,OAAO;AAAA,EAC3B;AAAA,EAIA,IAAoF,OAA6H;AAC7M,UAAM,SAAS,KAAK,SAAS,IAAI,MAAM,IAAI,KAAK;AAChD,QAAI,MAAM,YAAY,CAAC,QAAQ;AAC3B,YAAM,IAAI,wCAAwC,mCAAmC,MAAM,IAAI,EAAE;AAAA,IACrG;AACA,QAAI,UAAU,OAAO,SAAS,MAAM,MAAM;AACtC,YAAM,IAAI,wCAAwC,wBAAwB,6BAA6B,MAAM,IAAI,CAAC,eAAe,6BAA6B,OAAO,IAAI,CAAC,EAAE;AAAA,IAChL;AACA,WAAmE;AAAA,EACvE;AAAA,EAEA,IAAI,aAA4B;AAC5B,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,IAAI,QAAuB;AACvB,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,aAAwC;AACpC,QAAI,CAAC,KAAK,UAAU;AAChB,YAAM,IAAI,wCAAwC,gCAAgC;AAAA,IACtF;AACA,WAAkC,KAAK,SAAS,IAAI,KAAK,QAAQ;AAAA,EACrE;AACJ;AAEO,SAAS,iBAAiB,SAAkI;AAC/J,QAAM,UAAU,QAAQ,KAAK,YAAU,aAAa,UAAU,OAAO,OAAO;AAC5E,MAAI,CAAC,SAAS;AACV,UAAM,IAAI,wCAAwC,gCAAgC;AAAA,EACtF;AACA,SAAkC;AACtC;","names":[]}